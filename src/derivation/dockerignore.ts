import { Buffer } from "buffer";

import { Derivation } from "@project/derivation/abstract";
import { Project } from "@project/project";

/**
 * Builds the .dockerignore.
 */
export class DockerIgnoreDerivation implements Derivation {
  filePath = ".dockerignore";

  private readonly derivations: readonly Derivation[];

  public constructor(derivations: readonly Derivation[]) {
    this.derivations = derivations;
  }

  public async makeDerivation(project: Project): Promise<Buffer> {
    let contents: string = `#
# STOP! This file is automatically generated.
#
# To add your own rules to this .dockerignore,
# add them to batterypack.yml, then run "batterypack sync".
#

# File explorer metadata
.DS_Store
thumbs.db

# IDE settings
.idea/
.vscode/

# Node
node_modules

# Yarn
yarn-error.log
.yarn/*
!.yarn/releases
!.yarn/plugins
!.yarn/sdks
!.yarn/versions
.pnp.*

# Build files
build/
tsconfig.tsbuildinfo
*.tmp

# batterypack-managed files
.batterypack/
`;

    // add derivation files to dockerignore - batterypack manages these
    contents += this.derivations
      .map((derivation) => `/${derivation.filePath}\n`)
      .join("");

    // add custom rules
    contents += ["\n# Custom rules\n"]
      .concat(project.config.dockerignore?.map((rule) => `${rule}\n`) ?? [])
      .join("");

    return Buffer.from(contents, "utf-8");
  }
}
