import { Derivation } from "./abstract";
import { State } from "../state";
import { PathResolver } from "../../path";

/**
 * Builds the .gitignore.
 */
export class GitIgnoreDerivation implements Derivation {
  private readonly derivations: readonly Derivation[];

  public constructor(derivations: readonly Derivation[]) {
    this.derivations = derivations;
  }

  public getFilePath(): string {
    return ".gitignore";
  }

  public makeDerivation(state: State, project: PathResolver): Buffer {
    let contents: string = `#
# STOP! This file is automatically generated.
#
# To add your own rules to this .gitignore,
# add them to rocket.yml, then run "rocket sync".
#

# File explorer metadata
.DS_Store
thumbs.db

# IDE settings
.idea/
.vscode/

# Node
node_modules

# Yarn
yarn-error.log
.yarn/*
!.yarn/releases
!.yarn/plugins
!.yarn/sdks
!.yarn/versions
.pnp.*

# TypeScript
build/
tsconfig.tsbuildinfo

# Rocket-managed files
`;

    // add derivation files to gitignore - rocket manages these
    contents += this.derivations
      .map((derivation) => `${derivation.getFilePath()}\n`)
      .join("");

    // add custom rules
    contents += ["\n# Custom rules\n"]
      .concat(state.gitignore.map((rule) => `${rule}\n`))
      .join("");

    return Buffer.from(contents, "utf-8");
  }
}
